import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;

class LocalNotificationService {
  static final FlutterLocalNotificationsPlugin _notificationsPlugin =
      FlutterLocalNotificationsPlugin();

  static bool _isInitialized = false;

  // Kh·ªüi t·∫°o notification service
  static Future<void> initialize() async {
    if (_isInitialized) return;

    // Kh·ªüi t·∫°o timezone
    tz.initializeTimeZones();

    // C·∫•u h√¨nh cho Android
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('@mipmap/launcher_icon');

    // C·∫•u h√¨nh cho iOS
    const DarwinInitializationSettings initializationSettingsIOS =
        DarwinInitializationSettings(
      requestAlertPermission: true,
      requestBadgePermission: true,
      requestSoundPermission: true,
    );

    // C·∫•u h√¨nh t·ªïng th·ªÉ
    const InitializationSettings initializationSettings =
        InitializationSettings(
      android: initializationSettingsAndroid,
      iOS: initializationSettingsIOS,
    );

    // Kh·ªüi t·∫°o plugin
    await _notificationsPlugin.initialize(
      initializationSettings,
      onDidReceiveNotificationResponse: (NotificationResponse response) {
        // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng tap v√†o notification
        _handleNotificationTap(response);
      },
    );

    _isInitialized = true;
  }

  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng tap v√†o notification
  static void _handleNotificationTap(NotificationResponse response) {
    // C√≥ th·ªÉ navigate ƒë·∫øn trang c·ª• th·ªÉ ho·∫∑c th·ª±c hi·ªán action kh√°c
    print('Notification tapped: ${response.payload}');
  }

  // Y√™u c·∫ßu quy·ªÅn cho Android 13+
  static Future<bool> requestPermission() async {
    if (!_isInitialized) await initialize();

    // Y√™u c·∫ßu quy·ªÅn cho Android 13+
    final bool? granted = await _notificationsPlugin
        .resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>()
        ?.requestNotificationsPermission();

    return granted ?? true;
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o ngay l·∫≠p t·ª©c
  static Future<void> showInstantNotification({
    required int id,
    required String title,
    required String body,
    String? payload,
  }) async {
    if (!_isInitialized) await initialize();

    const NotificationDetails notificationDetails = NotificationDetails(
      android: AndroidNotificationDetails(
        'appointment_channel',
        'L·ªãch h·∫πn',
        channelDescription: 'Th√¥ng b√°o v·ªÅ l·ªãch h·∫πn th√∫ c∆∞ng',
        importance: Importance.high,
        priority: Priority.high,
        icon: '@mipmap/launcher_icon',
        color: Color(0xFF6366F1), // M√†u primary c·ªßa app
        playSound: true,
        enableVibration: true,
      ),
      iOS: DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
      ),
    );

    await _notificationsPlugin.show(
      id,
      title,
      body,
      notificationDetails,
      payload: payload,
    );
  }

  // Hi·ªÉn th·ªã th√¥ng b√°o v·ªÅ l·ªãch h·∫πn
  static Future<void> showAppointmentNotification(int appointmentCount) async {
    if (appointmentCount <= 0) return;

    String title;
    String body;

    if (appointmentCount == 1) {
      title = 'üêæ B·∫°n c√≥ 1 l·ªãch h·∫πn h√¥m nay!';
      body = 'ƒê·ª´ng qu√™n ƒë∆∞a th√∫ c∆∞ng ƒëi kh√°m nh√©!';
    } else {
      title = 'üêæ B·∫°n c√≥ $appointmentCount l·ªãch h·∫πn h√¥m nay!';
      body = 'Ki·ªÉm tra chi ti·∫øt c√°c l·ªãch h·∫πn c·ªßa b·∫°n.';
    }

    await showInstantNotification(
      id: 1001, // ID c·ªë ƒë·ªãnh cho appointment notifications
      title: title,
      body: body,
      payload: 'appointment_$appointmentCount',
    );
  }

  // L√™n l·ªãch th√¥ng b√°o cho t∆∞∆°ng lai
  static Future<void> scheduleNotification({
    required int id,
    required String title,
    required String body,
    required DateTime scheduledDate,
    String? payload,
  }) async {
    if (!_isInitialized) await initialize();

    const NotificationDetails notificationDetails = NotificationDetails(
      android: AndroidNotificationDetails(
        'scheduled_channel',
        'L·ªãch h·∫πn s·∫Øp t·ªõi',
        channelDescription: 'Th√¥ng b√°o nh·∫Øc nh·ªü l·ªãch h·∫πn s·∫Øp t·ªõi',
        importance: Importance.high,
        priority: Priority.high,
        icon: '@mipmap/launcher_icon',
        color: Color(0xFF6366F1),
        playSound: true,
        enableVibration: true,
      ),
      iOS: DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
      ),
    );

    await _notificationsPlugin.zonedSchedule(
      id,
      title,
      body,
      tz.TZDateTime.from(scheduledDate, tz.local),
      notificationDetails,
      androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      uiLocalNotificationDateInterpretation:
          UILocalNotificationDateInterpretation.absoluteTime,
      payload: payload,
    );
  }

  // H·ªßy m·ªôt th√¥ng b√°o c·ª• th·ªÉ
  static Future<void> cancelNotification(int id) async {
    await _notificationsPlugin.cancel(id);
  }

  // H·ªßy t·∫•t c·∫£ th√¥ng b√°o
  static Future<void> cancelAllNotifications() async {
    await _notificationsPlugin.cancelAll();
  }

  // L·∫•y th√¥ng b√°o ƒëang ch·ªù
  static Future<List<PendingNotificationRequest>> getPendingNotifications() async {
    return await _notificationsPlugin.pendingNotificationRequests();
  }
}
